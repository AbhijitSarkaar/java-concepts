

- open / close principle 
    - open for extension of a feature 
    - closed for modification 
    - classes that are already tested and live, should not be updated
    - new features should be extended to a new class 


// example 
// core functionality about what to do is defined at interface 
// new features are extended from interface into different classes e.g SaveToDBInvoice, SaveToFileInvoice

// Invoice.java 
package open_close_principle;

public class Invoice {
	int bill;
	public Invoice(int bill) {
		this.bill = bill;
	}
}

// InvoiceDao.java 
package open_close_principle;

public interface InvoiceDao {
	public void save(Invoice invoice);
}

// SaveToDBInvoice.java 
package open_close_principle;

public class SaveToDBInvoice implements InvoiceDao {
	public void save(Invoice invoice) {
		System.out.println("invoice saved to DB");
	}
}

// SaveToFileInvoice.java 
package open_close_principle;

public class SaveToFileInvoice implements InvoiceDao {
	public void save(Invoice invoice) {
		System.out.println("Saved to file");
	}
}

// Main.java 
package open_close_principle;

public class Main {
	public static void main(String[] args) {
		Invoice marker_invoice = new Invoice(100);
		SaveToDBInvoice new_invoice = new SaveToDBInvoice();
		new_invoice.save(marker_invoice);
		
		SaveToFileInvoice file_invoice = new SaveToFileInvoice();
		file_invoice.save(marker_invoice);
	}
}



